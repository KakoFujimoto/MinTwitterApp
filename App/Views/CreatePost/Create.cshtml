@using MinTwitterApp.Common
@model MinTwitterApp.DTO.CreatePostDTO
@inject LoginUser loginUser

@{
    ViewData["Title"] = "新規投稿";
}
<h2>NewPost</h2>

<div asp-validation-summary="All" class="text-danger"></div>
<form asp-controller="CreatePost" method="post" enctype="multipart/form-data">
    <div class="form-group">
        <label asp-for="Content" class="control-label">内容</label>
        <textarea asp-for="Content" class="form-control"></textarea>
        <span asp-validation-for="Content" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="ImageFile">画像をアップロード(※jpg, png, gif)</label>
        <input asp-for="ImageFile" type="file" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">投稿</button>
</form>

<hr>

<h3>Posts</h3>

@if (Model.Posts != null && Model.Posts.Any())
{
    <div class="list-group">
        @foreach (var post in Model.Posts)
        {
            var postId = post.Id;
            <div class="card" id="post-@postId">
                <div id="display-@postId">
                    <h6>@(post.UserName ?? "未設定")</h6>
                    <h6>@post.CreatedAt.ToString("yyyy/MM/dd HH:mm")</h6>
                    @if (post.RepostSourceId != null)
                    {
                        <div class="alert alert-secondary mb-2">
                            <small class="text-muted">リポスト元: @post.SourceUserName</small>
                            <p class="mb-0">@post.SourceContent</p>
                            <img src="@post.SourceImagePath" class="post-image">
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(post.ImagePath))
                    {
                        <a href="@post.ImagePath" target="_blank">
                            <img src="@post.ImagePath" class="post-image">
                        </a>
                    }
                    <p class="content">@post.Content</p>
                    <div class="d-flex align-items-center">
                        <span style="display:none;" id="user-id-@post.Id" data-user-id="@Model.CurrentUserId"></span>
                        <!-- いいねボタン -->
                        <button class="btn btn-link p-0" onclick="toggleLike(@post.Id)">
                            <i class="fas fa-heart @(post.IsLiked ? "text-danger" : "")" id="heart-icon-@post.Id"></i>
                        </button>
                        <!-- いいね数カウント -->
                        <span id="like-count-@post.Id" class="ms-2">@post.LikeCount</span>

                        <!-- 編集ボタン(投稿者のみに表示) -->
                        @if (User.Identity?.IsAuthenticated == true &&
                                        loginUser.GetUserId() == post.UserId.ToString())
                        {
                            <button type="button" class="btn btn-link p-0 ms-2 text-secondary" onclick="toggleEdit(@post.Id)">
                                <i class="fas fa-edit"></i>
                            </button>
                        }
                        
                        <!-- リポストボタン -->
                        <form asp-controller="RePost" asp-action="Create" method="post" class="ms-2">
                            <input type="hidden" name="originalPostId" value="@post.Id" />
                            <button type="submit" class="btn btn-link p-0 text-info">
                                <i class="fas fa-retweet"></i>
                            </button>
                        </form>

                    </div>
                </div>

                <!-- 編集フォーム（編集ボタンを押すと展開） -->
                <div id="edit-@postId" style="display: none;">
                    <form onsubmit="event.preventDefault(); saveEdit(@postId)" enctype="multipart/form-data">
                        <textarea id="edit-content-@postId" class="form-control mb-2">@post.Content</textarea>
                        <input type="file" id="edit-image-@postId" class="form-control mb-2" />
                        <div class="form-check mb-2">
                            <input type="checkbox" class="form-check-input" id="delete-image-@postId">
                            <label class="form-check-label" for="delete-image-@postId">画像を削除する</label>
                        </div>
                        <button type="submit" class="btn btn-primary btn-sm">保存</button>
                        <button type="button" class="btn btn-danger btn-sm" onclick="deletePost(@postId)">削除</button>
                        <button type="button" class="btn btn-secondary btn-sm" onclick="toggleEdit(@postId)">キャンセル</button>
                    </form>
                </div>

            </div>
        }
    </div>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        function toggleEdit(postId) {
            const display = document.getElementById(`display-${postId}`);
            const edit = document.getElementById(`edit-${postId}`);
            const isHidden = edit.style.display === 'none';

            display.style.display = isHidden ? 'none' : 'block';
            edit.style.display = isHidden ? 'block' : 'none';
        }

        async function saveEdit(postId) {
            const content = document.getElementById(`edit-content-${postId}`).value;
            const imageFile = document.getElementById(`edit-image-${postId}`).files[0];
            const deleteImage = document.getElementById(`delete-image-${postId}`).checked;

            const formData = new FormData();
            formData.append("Content", content);
            if (imageFile) formData.append("ImageFile", imageFile);
            formData.append("DeleteImage", deleteImage);

            const res = await fetch(`/api/EditPost/${postId}`, {
                method: 'PUT',
                body: formData
            });

            let result;
            try {
                result = await res.json();
            } catch (e) {
                alert('サーバーエラーが発生しました。');
                return;
            }

            if (res.ok) {
                location.reload();
            } else {
                alert(result.error || '編集に失敗しました。');
            }
        }

        async function deletePost(postId) {
            if (!confirm('本当に削除しますか？')) return;

            const res = await fetch(`/api/DeletePost/${postId}`, {
                method: 'DELETE'
            });

            if (res.ok) {
                document.getElementById(`post-${postId}`).remove();
            } else {
                alert('削除に失敗しました。');
            }
        }
        async function toggleLike(postId) {
            const userId = document.querySelector(`#user-id-${postId}`)?.dataset.userId;


            const res = await fetch("/api/Like/toggle", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ postId: postId })
            });

            if (!res.ok) {
                alert("いいねに失敗しました。");
                return;
            }

            const result = await res.json();

            const heartIcon = document.getElementById(`heart-icon-${postId}`);
            const likeCountSpan = document.getElementById(`like-count-${postId}`);

            if (result.isLiked) {
                heartIcon.classList.add("text-danger");
            } else {
                heartIcon.classList.remove("text-danger");
            }

            likeCountSpan.textContent = result.likeCount;
        }
    </script>

    <script src="~/react/static/js/main.de6f95fb.js"></script>
}
