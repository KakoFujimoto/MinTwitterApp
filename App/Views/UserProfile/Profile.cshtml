@model MinTwitterApp.DTO.UserProfilePageDTO

@{
    ViewData["Title"] = "プロフィール";
}

<h2>@Model.Profile.Name さんのプロフィール</h2>

<div class="mb-3">
    <p>
        <a asp-controller="FollowRelationship" asp-action="Following" asp-route-id="@Model.Profile.UserId">
            フォロー中: @Model.Profile.FollowingCount 人
        </a>
    </p>
    <p>
        <a asp-controller="FollowRelationship" asp-action="Followers" asp-route-id="@Model.Profile.UserId">
            フォロワー: <span id="followerCount">@Model.Profile.FollowerCount</span> 人
        </a>
    </p>
    <p>アカウント作成日: @Model.Profile.CreatedAt.ToString("yyyy/MM/dd")</p>

    @if (!Model.IsCurrentUser)
    {
        <button id="followBtn" class="btn btn-primary" disabled>読み込み中..</button>
    }
</div>

<hr />

<h3>投稿一覧</h3>
@await Component.InvokeAsync("PostList", new { posts = Model.Posts, currentUserId = Model.CurrentUserId})

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const targetUserId = @Model.Profile.UserId;
            const followBtn = document.getElementById("followBtn");
            const followerCountSpan = document.getElementById("followerCount");

            if (!followBtn) return;

            // フォロー状態を取得
            fetch(`/api/FollowUser/IsFollowing/${targetUserId}`, {
                credentials: 'include'
            })
                .then(response => response.json())
                .then(isFollowing => {
                    updateButton(isFollowing);
                    followBtn.disabled = false;
                })
                .catch(() => {
                    alert("フォロー状態の取得に失敗しました");
                    followBtn.disabled = true;
                });

            followBtn.addEventListener("click", () => {
                followBtn.disabled = true;

                fetch('/api/FollowUser/toggle', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify({ targetUserId: targetUserId })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.errorCode === 0) {
                            updateButton(data.isFollowing);
                            // フォロワー数の更新
                            let count = parseInt(followerCountSpan.textContent);
                            count = data.isFollowing ? count + 1 : count - 1;
                            followerCountSpan.textContent = count;
                        } else {
                            alert("フォロー処理に失敗しました。");
                        }
                        followBtn.disabled = false;
                    })
                    .catch((error) => {
                        console.error("フォロー処理中にエラーが発生", error);
                        alert("フォロー処理に失敗しました。");
                        followBtn.disabled = false;
                    });
            });

            function updateButton(isFollowing) {
                if (isFollowing) {
                    followBtn.textContent = "フォロー解除";
                    followBtn.classList.remove("btn-primary");
                    followBtn.classList.add("btn-secondary");
                } else {
                    followBtn.textContent = "フォローする";
                    followBtn.classList.remove("btn-secondary");
                    followBtn.classList.add("btn-primary");
                }
            }
        });
    </script>
}
